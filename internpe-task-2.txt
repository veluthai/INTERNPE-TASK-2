def print_board(board):
    print("Current board:")
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all(s == player for s in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)):
        return True

    if all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def check_draw(board):
    return all(all(cell != ' ' for cell in row) for row in board)
def get_move():
    while True:
        try:
            move = int(input("Enter your move (1-9): "))
            if move < 1 or move > 9:
                print("Invalid move. Please enter a number between 1 and 9.")
                continue
            return move - 1
        except ValueError:
            print("Invalid input. Please enter a number.")

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 0

    while True:
        print_board(board)
        move = get_move()
        row, col = divmod(move, 3)
if board[row][col] != ' ':
print("Cell already taken. Choose another.")
continue

board[row][col] = players[current_player]

if check_winner(board,players[current_player]
print_board(board)
print(f"Player {players[current_player]} wins!"}
break

if check_draw(board):
pprint_board(board)
print("It 's a draw!")
break

current_player = 1 - current_player

if __name__ == "__main__":
main()
